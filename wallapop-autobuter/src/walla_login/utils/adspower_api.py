# """
# Actions:
# 1. Create  profile
# 2. Delete profile
# 3. Open Browser
# 4. Close Browser
# 5. Check connection status
# 6. Check browser status
# """
# import os
# import random
# import time
# import uuid
# import requests
# from dotenv import load_dotenv
# from playwright.sync_api import sync_playwright
# from twocaptcha import TwoCaptcha
#
# load_dotenv()
#
# ADSPOWER_API_KEY = os.getenv('ADSPOWER_API_KEY')
# ADSPOWER_HOST = os.getenv('ADSPOWER_HOST')
#
# def check_connection_status():
#     url = f"{ADSPOWER_HOST}/status"
#     response = requests.get(url)
#
#     print(response.status_code, response.json())
#
# mobile_ua_list = [
#     # iPhone
#     "Mozilla/5.0 (iPhone; CPU iPhone OS 17_3_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Mobile/15E148 Safari/604.1",
#     "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
#
#     # Android
#     "Mozilla/5.0 (Linux; Android 14; SM-S911B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36",
#     "Mozilla/5.0 (Linux; Android 13; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
#
#     # iPad
#     "Mozilla/5.0 (iPad; CPU OS 17_3_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Mobile/15E148 Safari/604.1"
# ]
#
# def get_mobile_resolution(ua: str) -> str:
#     # iPhone (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)
#     if "iPhone" in ua:
#         return random.choice([
#             "375_812",  # iPhone X/XS/11 Pro
#             "414_896",  # iPhone 11/XR
#             "390_844",  # iPhone 12/13/14
#             "428_926"  # iPhone 12/13/14 Pro Max
#         ])
#
#     # iPad
#     elif "iPad" in ua:
#         return random.choice([
#             "768_1024",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π iPad
#             "810_1080",  # iPad Mini 6
#             "834_1194"  # iPad Pro 11"
#         ])
#
#     # Android (Samsung/Google Pixel)
#     else:
#         return random.choice([
#             "360_800",  # Samsung S20/S21
#             "412_915",  # Pixel 6/7
#             "393_873",  # Samsung S22/S23
#             "430_932"  # Samsung S23 Ultra
#         ])
#
# def generate_fingerprint():
#     ua = random.choice(mobile_ua_list)
#     stable_versions = ["131", "133", "135", "137"]
#
#     return {
#         "ua": ua,
#         "screen_resolution": get_mobile_resolution(ua),
#         "language": ["es-ES", "es"] if random.random() > 0.5 else ["en-US", "en"],
#         "canvas": "1",
#         "webgl_image": "1",
#         "webgl": "3",
#         "audio": "1",
#         "client_rects": "1",
#         "hardware_concurrency": str(random.choice([2, 4])),
#         "device_memory": str(random.choice([2, 4, 6])),
#         "device_name_switch": "1",
#         "fonts": random.choice([
#             ["Arial", "Segoe UI", "Tahoma"],
#             ["Roboto", "Open Sans", "Ubuntu"],
#             ["Georgia", "Times New Roman"]
#         ]),
#         "mac_address_config": {"model": "1"},
#         "browser_kernel_config": {
#             "type": "chrome",
#             "version": random.choice(stable_versions)
#         },
#         "random_ua": {
#             "ua_browser": ["chrome"],
#             "ua_version": stable_versions,
#             "ua_system_version": ["Android 13", "iOS 16"]
#         }
#     }
#
# def create_adspower_profile(user_proxy_cfg):
#     url = f"{ADSPOWER_HOST}/api/v2/browser-profile/create"
#     fingerprint_cfg = generate_fingerprint()
#
#     payload = {
#         "name": f"wallapop_{uuid.uuid4().hex[:6]}",
#         "group_id": "0",
#         "platform": "es.wallapop.com",
#         "repeat-config": [0],
#         "tabs": ["https://www.google.com"],
#         "user_proxy_config": user_proxy_cfg,
#         "fingerprint_config": fingerprint_cfg
#     }
#     try:
#         response = requests.post(url, json=payload)
#         response.raise_for_status()
#         data = response.json()
#         print(response.status_code, data)
#         if data['code'] != "-1":
#             profile_id = data['data']['profile_id']
#             # profile_no = data['data']['profile_no']
#             return profile_id
#         return None
#     except Exception as e:
#         print(f"Error creating AdsPower profile: {e}")
#         return None
#
# def delete_adspower_profile(profile_id):
#     url = f"{ADSPOWER_HOST}/api/v2/browser-profile/delete"
#     payload = {
#         "profile_id": [profile_id]
#     }
#
#     response = requests.post(url,json=payload)
#     print(response.status_code, response.json())
#
# def open_adspower_browser(profile_id):
#     url = f"{ADSPOWER_HOST}/api/v2/browser-profile/start"
#
#     payload = {
#         "profile_id": profile_id,
#         "headless": "0",
#         "proxy_detection": "0",
#         "cdp_mask": "1",
#         "launch_args": [  # –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã Chrome
#             "--disable-blink-features=AutomationControlled",
#             "--disable-infobars",
#             "--disable-notifications",
#             "--disable-popup-blocking"
#         ],
#         "last_opened_tabs": "0",
#         "password_filling": "0",
#         "password_saving": "0"
#     }
#
#     response = requests.post(url, json=payload)
#     print(response.status_code)
#
#     data = response.json()
#     print(data)
#
#     debug_port = data['data']['debug_port']
#     if debug_port:
#         print(debug_port)
#         return debug_port
#     return None
#
# def check_adspower_browser_status(profile_id):
#     url = f"{ADSPOWER_HOST}/api/v2/browser-profile/active"
#     payload = {
#         "profile_id": profile_id
#     }
#
#     response = requests.get(url,json=payload)
#
#     print(response.status_code, response.json())
#
# def close_adspower_browser(profile_id):
#     url = f"{ADSPOWER_HOST}/api/v2/browser-profile/stop"
#     payload = {
#         "profile_id": profile_id
#     }
#
#     response = requests.get(url,json=payload)
#
#     print(response.status_code, response.json())
#
# def get_adspower_profile_cookies(profile_id):
#     url = f"{ADSPOWER_HOST}/api/v2/browser-profile/cookies"
#
#     payload = {
#         "profile_id": profile_id
#     }
#     response = requests.get(url, json=payload)
#     print(response.status_code)
#
#     data = response.json()
#
#     cookies = data['data']['cookies']
#     if cookies:
#         return cookies
#     return None
#
# API_2CAPTCHA = "ebdf9de880e9f0cc3759e3a016a3bd6c"
# SITEKEY = "6LcXfesZAAAAAJM2165Nf6nbqruGRJx8rdK6Bx3a"
# PAGE_URL = "https://es.wallapop.com/auth/signin?redirectUrl=%2F"
# EMAIL = "special.one90@hotmail.it"
# PASSWORD = "12345678qwert"
# WALLAPOP_LOGIN_URL = "https://es.wallapop.com/auth/signin=%2F"
# solver = TwoCaptcha(API_2CAPTCHA)
# def solve_wallapop_captcha():
#     """–†–µ—à–∞–µ—Ç reCAPTCHA Enterprise —Å –ø–æ–º–æ—â—å—é 2captcha –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω."""
#     try:
#         result = solver.recaptcha(
#             sitekey=SITEKEY,
#             url=PAGE_URL,
#             enterprise=1,  # –£—á–∏—Ç—ã–≤–∞–µ–º Enterprise
#         )
#         code = result.get("code")
#         print("‚úÖ –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ (Enterprise v2), —Ç–æ–∫–µ–Ω:", code)
#         return code
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∫–∞–ø—á–∏: {e}")
#         return None
#
# def wallapop_login_with_automated_captcha(profile_id):
#     """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –Ω–∞ Wallapop —Å —Ä–µ—à–µ–Ω–∏–µ–º –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ 2captcha."""
#     # –ü–æ–ª—É—á–∞–µ–º debug port —á–µ—Ä–µ–∑ –≤–∞—à –º–µ—Ç–æ–¥
#     debug_port = open_adspower_browser(profile_id)
#     if not debug_port:
#         print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å debug port")
#         return
#
#     print(f"üõú –ü–æ–ª—É—á–µ–Ω debug port: {debug_port}")
#
#     # –ü–æ–ª—É—á–∞–µ–º WebSocket URL —á–µ—Ä–µ–∑ CDP
#     cdp_url = f"http://127.0.0.1:{debug_port}/json/version"
#     try:
#         response = requests.get(cdp_url)
#         response.raise_for_status()
#         cdp_data = response.json()
#         ws_url = cdp_data["webSocketDebuggerUrl"]
#         print(f"üîå WebSocket URL: {ws_url}")
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ WebSocket URL: {e}")
#         return
#
#     with sync_playwright() as p:
#         # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–∞—É–∑–µ—Ä—É AdsPower —á–µ—Ä–µ–∑ WebSocket
#         browser = p.chromium.connect_over_cdp(ws_url)
#         context = browser.contexts[0]
#         page = context.pages[0] if context.pages else context.new_page()
#         page.set_default_timeout(120000)
#
#         print("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Wallapop...")
#         page.goto("https://es.wallapop.com/auth/onboarding?redirectUrl=%2F")
#
#         # –ü—Ä–∏–Ω—è—Ç–∏–µ –∫—É–∫–∏
#         try:
#             accept_button = page.wait_for_selector('#onetrust-accept-btn-handler', timeout=5000)
#             if accept_button:
#                 accept_button.click()
#                 print("üç™ –ö—É–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã!")
#                 time.sleep(1)
#         except:
#             print("‚ö†Ô∏è –ö—É–∫–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
#
#         # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "Iniciar sesi√≥n"
#         login_button_selector = 'div.walla-button__children-container span:has-text("Iniciar sesi√≥n")'
#         page.click(login_button_selector)
#         print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'Iniciar sesi√≥n' –Ω–∞–∂–∞—Ç–∞")
#
#         # # –ü—Ä–∏–Ω—è—Ç–∏–µ –∫—É–∫–∏
#         # try:
#         #     accept_button = page.wait_for_selector('#onetrust-accept-btn-handler', timeout=5000)
#         #     if accept_button:
#         #         accept_button.click()
#         #         print("üç™ –ö—É–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã!")
#         #         time.sleep(1)
#         # except:
#         #     print("‚ö†Ô∏è –ö—É–∫–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
#
#         # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
#         try:
#             page.fill("#signin-email", EMAIL)
#             print("üìß –í–≤–µ–¥–µ–Ω email")
#             page.fill("#signin-password", PASSWORD)
#             print("üîë –í–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å")
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è: {e}")
#             browser.close()
#             return
#
#         # # –†–∞–±–æ—Ç–∞ —Å –∫–∞–ø—á–µ–π
#         # try:
#         #     print("üß© –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–ø—á–∏...")
#         #     captcha_frame = page.wait_for_selector('iframe[title*="reCAPTCHA"]', timeout=10000)
#         #     if captcha_frame:
#         #         frame = captcha_frame.content_frame()
#         #         checkbox = frame.wait_for_selector('.recaptcha-checkbox')
#         #         checkbox.click()
#         #         print("‚úÖ –ö–∞–ø—á–∞ —á–µ–∫–±–æ–∫—Å –Ω–∞–∂–∞—Ç")
#         # except Exception as e:
#         #     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–∞–ø—á–µ–π: {e}")
#
#         # time.sleep(5)
#         # –†–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript
#         print("üß© –†–µ—à–∞–µ–º –∫–∞–ø—á—É —Å –ø–æ–º–æ—â—å—é 2captcha...")
#         token = solve_wallapop_captcha()
#         print(token)
#         # token = page.evaluate('document.getElementById("recaptcha-token").value')
#         if not token:
#             print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∫–∞–ø—á–∏")
#             browser.close()
#             return
#
#         try:
#             js_code = f"""
#                 (function() {{
#                     const recaptchaResponse = document.getElementById('g-recaptcha-response');
#                     if (recaptchaResponse) {{
#                         recaptchaResponse.value = "{token}";
#                         const event = new Event('input', {{ bubbles: true }});
#                         recaptchaResponse.dispatchEvent(event);
#
#                         // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é reCAPTCHA
#                         if (typeof window.onRecaptchaSuccessCallback === 'function') {{
#                             window.onRecaptchaSuccessCallback("{token}");
#                         }}
#
#                         console.log("–¢–æ–∫–µ–Ω reCAPTCHA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
#                         return true;
#                     }}
#                     return false;
#                 }})();
#             """
#             result = page.evaluate(js_code)
#             if result:
#                 print("‚úÖ –¢–æ–∫–µ–Ω –∫–∞–ø—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#             else:
#                 print("‚ùå –≠–ª–µ–º–µ–Ω—Ç reCAPTCHA –Ω–µ –Ω–∞–π–¥–µ–Ω")
#
#             input("–õ—é–±–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
#             # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
#             login_button = page.wait_for_selector('button[type="submit"]', timeout=5000)
#             if login_button:
#                 # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
#                 time.sleep(random.uniform(0.5, 1.5))
#                 login_button.click()
#                 print("üîì –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞")
#
#                 # –û–∂–∏–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
#                 page.wait_for_load_state("networkidle", timeout=30000)
#                 print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
#             else:
#                 print("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
#                 browser.close()
#                 return
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –≤—Ö–æ–¥–µ: {e}")
#             browser.close()
#             return
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
#         try:
#             # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
#             page.wait_for_selector('a[data-testid="user-menu"]', timeout=15000)
#             print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –≠–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–π–¥–µ–Ω")
#
#             # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ URL
#             if "account" in page.url or "app" in page.url:
#                 print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ URL: {page.url}")
#             else:
#                 print(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞: {page.url}")
#
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ö–æ–¥–∞: {e}")
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#             error_msg = page.query_selector('.error-message')
#             if error_msg:
#                 print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_msg.inner_text()}")
#
#             # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
#             page.screenshot(path="login_error.png")
#             print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ login_error.png")
#
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#         print("\nüîê –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è requests:")
#         cookies = context.cookies()
#         user_agent = page.evaluate("() => navigator.userAgent")
#
#         print(f"üç™ –ö—É–∫–∏: {len(cookies)} items")
#         print(f"üï∂Ô∏è User-Agent: {user_agent[:50]}...")
#
#         # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é requests
#         session = requests.Session()
#         session.headers.update({"User-Agent": user_agent})
#         for cookie in cookies:
#             session.cookies.set(cookie['name'], cookie['value'], domain=cookie['domain'])
#
#         print("üõë –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ (–±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º)")
#         browser.disconnect()
#
#         return session  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
#
# def wallapop_login(profile_id):
#     # –ü–æ–ª—É—á–∞–µ–º debug port
#     debug_port = open_adspower_browser(profile_id)
#     if not debug_port:
#         print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å debug port")
#         return
#
#     print(f"üõú –ü–æ–ª—É—á–µ–Ω debug port: {debug_port}")
#
#     # –ü–æ–ª—É—á–∞–µ–º WebSocket URL —á–µ—Ä–µ–∑ CDP
#     cdp_url = f"http://127.0.0.1:{debug_port}/json/version"
#     try:
#         response = requests.get(cdp_url)
#         response.raise_for_status()
#         cdp_data = response.json()
#         ws_url = cdp_data["webSocketDebuggerUrl"]
#         print(f"üîå WebSocket URL: {ws_url}")
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ WebSocket URL: {e}")
#         return
#
#     with sync_playwright() as p:
#         # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–∞—É–∑–µ—Ä—É AdsPower —á–µ—Ä–µ–∑ WebSocket
#         browser = p.chromium.connect_over_cdp(ws_url)
#         context = browser.contexts[0]
#         page = context.pages[0] if context.pages else context.new_page()
#         page.set_default_timeout(120000)
#
#         print("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Wallapop...")
#         page.goto("https://es.wallapop.com/auth/onboarding?redirectUrl=%2F")
#
#         # –ü—Ä–∏–Ω—è—Ç–∏–µ –∫—É–∫–∏
#         try:
#             accept_button = page.wait_for_selector('#onetrust-accept-btn-handler', timeout=5000)
#             if accept_button:
#                 accept_button.click()
#                 print("üç™ –ö—É–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã!")
#                 time.sleep(1)
#         except:
#             print("‚ö†Ô∏è –ö—É–∫–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
#
#         # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "Iniciar sesi√≥n"
#         login_button_selector = 'div.walla-button__children-container span:has-text("Iniciar sesi√≥n")'
#         page.click(login_button_selector)
#         print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'Iniciar sesi√≥n' –Ω–∞–∂–∞—Ç–∞")
#
#         # –í–≤–æ–¥ email
#         try:
#             email_input = page.wait_for_selector('input#username', timeout=5000)
#             if email_input:
#                 email_input.fill(EMAIL)
#                 print("üìß –í–≤–µ–¥–µ–Ω email")
#             else:
#                 print("‚ùå –ü–æ–ª–µ –¥–ª—è email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
#                 browser.close()
#                 return
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ email: {e}")
#             browser.close()
#             return
#
#         # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
#         try:
#             password_input = page.wait_for_selector('input#password', timeout=5000)
#             if password_input:
#                 password_input.fill(PASSWORD)
#                 print("üîë –í–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å")
#             else:
#                 print("‚ùå –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
#                 browser.close()
#                 return
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è: {e}")
#             browser.close()
#             return
#
#         try:
#             # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
#             login_button = page.wait_for_selector(
#                 'button.walla-button__button--primary span:has-text("Acceder a Wallapop")', timeout=5000)
#             if login_button:
#                 # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
#                 time.sleep(random.uniform(0.5, 1.5))
#                 login_button.click()
#                 print("üîì –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞")
#
#                 # –û–∂–∏–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
#                 page.wait_for_load_state("networkidle", timeout=30000)
#                 print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
#             else:
#                 print("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
#                 browser.close()
#                 return
#
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
#             browser.close()
#             return
#
#         browser.close()
#
#
#
# if  __name__ == "__main__":
#     profile = "k12pfh7c"
#
#
#     wallapop_login_with_automated_captcha(profile_id="k12qee0q")